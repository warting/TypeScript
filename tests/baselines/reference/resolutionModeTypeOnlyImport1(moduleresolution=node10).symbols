//// [tests/cases/conformance/moduleResolution/resolutionModeTypeOnlyImport1.ts] ////

=== /node_modules/@types/foo/index.d.mts ===
export declare const x: "module";
>x : Symbol(x, Decl(index.d.mts, 0, 20))

=== /node_modules/@types/foo/index.d.cts ===
export declare const x: "script";
>x : Symbol(x, Decl(index.d.cts, 0, 20))

=== /app.ts ===
import type { x as Default } from "foo";
>Default : Symbol(Default, Decl(app.ts, 0, 13))

import type { x as Import } from "foo" assert { "resolution-mode": "import" };
>x : Symbol(Import, Decl(index.d.mts, 0, 20))
>Import : Symbol(Import, Decl(app.ts, 1, 13))

import type { x as Require } from "foo" assert { "resolution-mode": "require" };
>x : Symbol(Require, Decl(index.d.cts, 0, 20))
>Require : Symbol(Require, Decl(app.ts, 2, 13))

type _Default = typeof Default;
>_Default : Symbol(_Default, Decl(app.ts, 2, 80))
>Default : Symbol(Default, Decl(app.ts, 0, 13))

type _Import = typeof Import;
>_Import : Symbol(_Import, Decl(app.ts, 3, 31))
>Import : Symbol(Import, Decl(app.ts, 1, 13))

type _Require = typeof Require;
>_Require : Symbol(_Require, Decl(app.ts, 4, 29))
>Require : Symbol(Require, Decl(app.ts, 2, 13))

// resolution-mode does not enforce file extension in `bundler`, just sets conditions
import type { x as ImportRelative } from "./other" assert { "resolution-mode": "import" };
>x : Symbol(ImportRelative, Decl(other.ts, 0, 12))
>ImportRelative : Symbol(ImportRelative, Decl(app.ts, 8, 13))

import type { x as RequireRelative } from "./other" assert { "resolution-mode": "require" };
>x : Symbol(ImportRelative, Decl(other.ts, 0, 12))
>RequireRelative : Symbol(RequireRelative, Decl(app.ts, 9, 13))

type _ImportRelative = typeof ImportRelative;
>_ImportRelative : Symbol(_ImportRelative, Decl(app.ts, 9, 92))
>ImportRelative : Symbol(ImportRelative, Decl(app.ts, 8, 13))

type _RequireRelative = typeof RequireRelative;
>_RequireRelative : Symbol(_RequireRelative, Decl(app.ts, 10, 45))
>RequireRelative : Symbol(RequireRelative, Decl(app.ts, 9, 13))

export {
  _Default,
>_Default : Symbol(_Default, Decl(app.ts, 13, 8))

  _Import,
>_Import : Symbol(_Import, Decl(app.ts, 14, 11))

  _Require,
>_Require : Symbol(_Require, Decl(app.ts, 15, 10))

  _ImportRelative,
>_ImportRelative : Symbol(_ImportRelative, Decl(app.ts, 16, 11))

  _RequireRelative
>_RequireRelative : Symbol(_RequireRelative, Decl(app.ts, 17, 18))
}

=== /other.ts ===
export const x = "other";
>x : Symbol(x, Decl(other.ts, 0, 12))


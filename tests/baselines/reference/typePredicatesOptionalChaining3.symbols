//// [tests/cases/compiler/typePredicatesOptionalChaining3.ts] ////

=== typePredicatesOptionalChaining3.ts ===
interface Animal {
>Animal : Symbol(Animal, Decl(typePredicatesOptionalChaining3.ts, 0, 0))

  breed?: Breed;
>breed : Symbol(Animal.breed, Decl(typePredicatesOptionalChaining3.ts, 0, 18))
>Breed : Symbol(Breed, Decl(typePredicatesOptionalChaining3.ts, 2, 1))
}
interface Breed {
>Breed : Symbol(Breed, Decl(typePredicatesOptionalChaining3.ts, 2, 1))

  size?: string;
>size : Symbol(Breed.size, Decl(typePredicatesOptionalChaining3.ts, 3, 17))
}

declare function isNil(value: unknown): value is undefined | null;
>isNil : Symbol(isNil, Decl(typePredicatesOptionalChaining3.ts, 5, 1))
>value : Symbol(value, Decl(typePredicatesOptionalChaining3.ts, 7, 23))
>value : Symbol(value, Decl(typePredicatesOptionalChaining3.ts, 7, 23))

function getBreedSizeWithoutFunction(animal: Animal): string | undefined {
>getBreedSizeWithoutFunction : Symbol(getBreedSizeWithoutFunction, Decl(typePredicatesOptionalChaining3.ts, 7, 66))
>animal : Symbol(animal, Decl(typePredicatesOptionalChaining3.ts, 9, 37))
>Animal : Symbol(Animal, Decl(typePredicatesOptionalChaining3.ts, 0, 0))

  if (animal?.breed?.size != null) {
>animal?.breed?.size : Symbol(Breed.size, Decl(typePredicatesOptionalChaining3.ts, 3, 17))
>animal?.breed : Symbol(Animal.breed, Decl(typePredicatesOptionalChaining3.ts, 0, 18))
>animal : Symbol(animal, Decl(typePredicatesOptionalChaining3.ts, 9, 37))
>breed : Symbol(Animal.breed, Decl(typePredicatesOptionalChaining3.ts, 0, 18))
>size : Symbol(Breed.size, Decl(typePredicatesOptionalChaining3.ts, 3, 17))

    return animal.breed.size;
>animal.breed.size : Symbol(Breed.size, Decl(typePredicatesOptionalChaining3.ts, 3, 17))
>animal.breed : Symbol(Animal.breed, Decl(typePredicatesOptionalChaining3.ts, 0, 18))
>animal : Symbol(animal, Decl(typePredicatesOptionalChaining3.ts, 9, 37))
>breed : Symbol(Animal.breed, Decl(typePredicatesOptionalChaining3.ts, 0, 18))
>size : Symbol(Breed.size, Decl(typePredicatesOptionalChaining3.ts, 3, 17))

  } else {
    return undefined;
>undefined : Symbol(undefined)
  }
}

function getBreedSizeWithFunction(animal: Animal): string | undefined {
>getBreedSizeWithFunction : Symbol(getBreedSizeWithFunction, Decl(typePredicatesOptionalChaining3.ts, 15, 1))
>animal : Symbol(animal, Decl(typePredicatesOptionalChaining3.ts, 17, 34))
>Animal : Symbol(Animal, Decl(typePredicatesOptionalChaining3.ts, 0, 0))

  if (!isNil(animal?.breed?.size)) {
>isNil : Symbol(isNil, Decl(typePredicatesOptionalChaining3.ts, 5, 1))
>animal?.breed?.size : Symbol(Breed.size, Decl(typePredicatesOptionalChaining3.ts, 3, 17))
>animal?.breed : Symbol(Animal.breed, Decl(typePredicatesOptionalChaining3.ts, 0, 18))
>animal : Symbol(animal, Decl(typePredicatesOptionalChaining3.ts, 17, 34))
>breed : Symbol(Animal.breed, Decl(typePredicatesOptionalChaining3.ts, 0, 18))
>size : Symbol(Breed.size, Decl(typePredicatesOptionalChaining3.ts, 3, 17))

    return animal.breed.size;
>animal.breed.size : Symbol(Breed.size, Decl(typePredicatesOptionalChaining3.ts, 3, 17))
>animal.breed : Symbol(Animal.breed, Decl(typePredicatesOptionalChaining3.ts, 0, 18))
>animal : Symbol(animal, Decl(typePredicatesOptionalChaining3.ts, 17, 34))
>breed : Symbol(Animal.breed, Decl(typePredicatesOptionalChaining3.ts, 0, 18))
>size : Symbol(Breed.size, Decl(typePredicatesOptionalChaining3.ts, 3, 17))

  } else {
    return undefined;
>undefined : Symbol(undefined)
  }
}


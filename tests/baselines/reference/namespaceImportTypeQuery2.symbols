//// [tests/cases/conformance/externalModules/typeOnly/namespaceImportTypeQuery2.ts] ////

=== /z.ts ===
interface A {}
>A : Symbol(A, Decl(z.ts, 0, 0))

export type { A };
>A : Symbol(A, Decl(z.ts, 1, 13))

=== /a.ts ===
import { A } from './z';
>A : Symbol(A, Decl(a.ts, 0, 8), Decl(a.ts, 1, 5))

const A = 0;
>A : Symbol(A, Decl(a.ts, 0, 8), Decl(a.ts, 1, 5))

export { A };
>A : Symbol(A, Decl(a.ts, 2, 8))

export class B {};
>B : Symbol(B, Decl(a.ts, 2, 13))

=== /b.ts ===
import * as types from './a';
>types : Symbol(types, Decl(b.ts, 0, 6))

let t: typeof types = {
>t : Symbol(t, Decl(b.ts, 1, 3))
>types : Symbol(types, Decl(b.ts, 0, 6))

  A: undefined as any, // ok
>A : Symbol(A, Decl(b.ts, 1, 23))
>undefined : Symbol(undefined)

  B: undefined as any,
>B : Symbol(B, Decl(b.ts, 2, 22))
>undefined : Symbol(undefined)
}

